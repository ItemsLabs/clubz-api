// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionTier tier of subscription
//
// swagger:model SubscriptionTier
type SubscriptionTier string

func NewSubscriptionTier(value SubscriptionTier) *SubscriptionTier {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SubscriptionTier.
func (m SubscriptionTier) Pointer() *SubscriptionTier {
	return &m
}

const (

	// SubscriptionTierNone captures enum value "none"
	SubscriptionTierNone SubscriptionTier = "none"

	// SubscriptionTierPremium captures enum value "premium"
	SubscriptionTierPremium SubscriptionTier = "premium"

	// SubscriptionTierLite captures enum value "lite"
	SubscriptionTierLite SubscriptionTier = "lite"
)

// for schema
var subscriptionTierEnum []interface{}

func init() {
	var res []SubscriptionTier
	if err := json.Unmarshal([]byte(`["none","premium","lite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTierEnum = append(subscriptionTierEnum, v)
	}
}

func (m SubscriptionTier) validateSubscriptionTierEnum(path, location string, value SubscriptionTier) error {
	if err := validate.EnumCase(path, location, value, subscriptionTierEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription tier
func (m SubscriptionTier) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionTierEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription tier based on context it is used
func (m SubscriptionTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaTeam schema team
//
// swagger:model schema.Team
type SchemaTeam struct {

	// abbr
	Abbr *NullString `json:"abbr,omitempty"`

	// country id
	CountryID *NullString `json:"country_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// crest url
	CrestURL *NullString `json:"crest_url,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// import id
	ImportID *NullString `json:"import_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ortec selection id
	OrtecSelectionID *NullString `json:"ortec_selection_id,omitempty"`

	// region id
	RegionID *NullString `json:"region_id,omitempty"`

	// short name
	ShortName *NullString `json:"short_name,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this schema team
func (m *SchemaTeam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrestURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrtecSelectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaTeam) validateAbbr(formats strfmt.Registry) error {
	if swag.IsZero(m.Abbr) { // not required
		return nil
	}

	if m.Abbr != nil {
		if err := m.Abbr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abbr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("abbr")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) validateCountryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryID) { // not required
		return nil
	}

	if m.CountryID != nil {
		if err := m.CountryID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) validateCrestURL(formats strfmt.Registry) error {
	if swag.IsZero(m.CrestURL) { // not required
		return nil
	}

	if m.CrestURL != nil {
		if err := m.CrestURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crest_url")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crest_url")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) validateImportID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportID) { // not required
		return nil
	}

	if m.ImportID != nil {
		if err := m.ImportID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) validateOrtecSelectionID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrtecSelectionID) { // not required
		return nil
	}

	if m.OrtecSelectionID != nil {
		if err := m.OrtecSelectionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ortec_selection_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ortec_selection_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) validateRegionID(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionID) { // not required
		return nil
	}

	if m.RegionID != nil {
		if err := m.RegionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) validateShortName(formats strfmt.Registry) error {
	if swag.IsZero(m.ShortName) { // not required
		return nil
	}

	if m.ShortName != nil {
		if err := m.ShortName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("short_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("short_name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schema team based on the context it is used
func (m *SchemaTeam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbbr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountryID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCrestURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrtecSelectionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShortName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaTeam) contextValidateAbbr(ctx context.Context, formats strfmt.Registry) error {

	if m.Abbr != nil {

		if swag.IsZero(m.Abbr) { // not required
			return nil
		}

		if err := m.Abbr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abbr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("abbr")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) contextValidateCountryID(ctx context.Context, formats strfmt.Registry) error {

	if m.CountryID != nil {

		if swag.IsZero(m.CountryID) { // not required
			return nil
		}

		if err := m.CountryID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) contextValidateCrestURL(ctx context.Context, formats strfmt.Registry) error {

	if m.CrestURL != nil {

		if swag.IsZero(m.CrestURL) { // not required
			return nil
		}

		if err := m.CrestURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crest_url")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crest_url")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) contextValidateImportID(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportID != nil {

		if swag.IsZero(m.ImportID) { // not required
			return nil
		}

		if err := m.ImportID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) contextValidateOrtecSelectionID(ctx context.Context, formats strfmt.Registry) error {

	if m.OrtecSelectionID != nil {

		if swag.IsZero(m.OrtecSelectionID) { // not required
			return nil
		}

		if err := m.OrtecSelectionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ortec_selection_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ortec_selection_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) contextValidateRegionID(ctx context.Context, formats strfmt.Registry) error {

	if m.RegionID != nil {

		if swag.IsZero(m.RegionID) { // not required
			return nil
		}

		if err := m.RegionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaTeam) contextValidateShortName(ctx context.Context, formats strfmt.Registry) error {

	if m.ShortName != nil {

		if swag.IsZero(m.ShortName) { // not required
			return nil
		}

		if err := m.ShortName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("short_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("short_name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaTeam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaTeam) UnmarshalBinary(b []byte) error {
	var res SchemaTeam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

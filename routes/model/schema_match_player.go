// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaMatchPlayer schema match player
//
// swagger:model schema.MatchPlayer
type SchemaMatchPlayer struct {

	// avg score
	AvgScore *NullFloat64 `json:"avg_score,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// from lineups
	FromLineups bool `json:"from_lineups,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is star
	IsStar bool `json:"is_star,omitempty"`

	// jersey number
	JerseyNumber *NullInt `json:"jersey_number,omitempty"`

	// match id
	MatchID string `json:"match_id,omitempty"`

	// played seconds
	PlayedSeconds *NullInt `json:"played_seconds,omitempty"`

	// player id
	PlayerID string `json:"player_id,omitempty"`

	// position
	Position *NullString `json:"position,omitempty"`

	// score
	Score *NullFloat64 `json:"score,omitempty"`

	// team id
	TeamID string `json:"team_id,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this schema match player
func (m *SchemaMatchPlayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvgScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJerseyNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayedSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaMatchPlayer) validateAvgScore(formats strfmt.Registry) error {
	if swag.IsZero(m.AvgScore) { // not required
		return nil
	}

	if m.AvgScore != nil {
		if err := m.AvgScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avg_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avg_score")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) validateJerseyNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.JerseyNumber) { // not required
		return nil
	}

	if m.JerseyNumber != nil {
		if err := m.JerseyNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jersey_number")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jersey_number")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) validatePlayedSeconds(formats strfmt.Registry) error {
	if swag.IsZero(m.PlayedSeconds) { // not required
		return nil
	}

	if m.PlayedSeconds != nil {
		if err := m.PlayedSeconds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("played_seconds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("played_seconds")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if m.Score != nil {
		if err := m.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schema match player based on the context it is used
func (m *SchemaMatchPlayer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvgScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJerseyNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlayedSeconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaMatchPlayer) contextValidateAvgScore(ctx context.Context, formats strfmt.Registry) error {

	if m.AvgScore != nil {

		if swag.IsZero(m.AvgScore) { // not required
			return nil
		}

		if err := m.AvgScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avg_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avg_score")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) contextValidateJerseyNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.JerseyNumber != nil {

		if swag.IsZero(m.JerseyNumber) { // not required
			return nil
		}

		if err := m.JerseyNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jersey_number")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jersey_number")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) contextValidatePlayedSeconds(ctx context.Context, formats strfmt.Registry) error {

	if m.PlayedSeconds != nil {

		if swag.IsZero(m.PlayedSeconds) { // not required
			return nil
		}

		if err := m.PlayedSeconds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("played_seconds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("played_seconds")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if swag.IsZero(m.Position) { // not required
			return nil
		}

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatchPlayer) contextValidateScore(ctx context.Context, formats strfmt.Registry) error {

	if m.Score != nil {

		if swag.IsZero(m.Score) { // not required
			return nil
		}

		if err := m.Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaMatchPlayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaMatchPlayer) UnmarshalBinary(b []byte) error {
	var res SchemaMatchPlayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item item
//
// swagger:model Item
type Item struct {

	// bonus quantity
	BonusQuantity interface{} `json:"BonusQuantity,omitempty"`

	// close date at
	// Format: date-time
	CloseDateAt strfmt.DateTime `json:"CloseDateAt,omitempty"`

	// contract abbr
	ContractAbbr string `json:"ContractAbbr,omitempty"`

	// contract address
	ContractAddress string `json:"ContractAddress,omitempty"`

	// default quantity
	DefaultQuantity int64 `json:"DefaultQuantity,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// ID
	ID int64 `json:"ID,omitempty"`

	// max quantity
	MaxQuantity int64 `json:"MaxQuantity,omitempty"`

	// min quantity
	MinQuantity int64 `json:"MinQuantity,omitempty"`

	// page URL
	PageURL string `json:"PageURL,omitempty"`

	// price
	Price float64 `json:"Price,omitempty"`

	// purchase img URL
	PurchaseImgURL string `json:"PurchaseImgURL,omitempty"`

	// start date at
	// Format: date-time
	StartDateAt strfmt.DateTime `json:"StartDateAt,omitempty"`

	// stripe price ID
	StripePriceID string `json:"StripePriceID,omitempty"`

	// title
	Title string `json:"Title,omitempty"`

	// token ID
	TokenID string `json:"TokenID,omitempty"`

	// type
	// Enum: [1 2]
	Type int64 `json:"Type,omitempty"`

	// whitelist required
	WhitelistRequired bool `json:"WhitelistRequired,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloseDateAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateCloseDateAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseDateAt) { // not required
		return nil
	}

	if err := validate.FormatOf("CloseDateAt", "body", "date-time", m.CloseDateAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateStartDateAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateAt) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateAt", "body", "date-time", m.StartDateAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var itemTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemTypeTypePropEnum = append(itemTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *Item) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, itemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Item) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this item based on context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

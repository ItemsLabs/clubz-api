// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/itemslabs/clubz-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MatchPlayer match player
//
// swagger:model MatchPlayer
type MatchPlayer struct {

	// is playing
	IsPlaying bool `json:"is_playing"`

	// is star
	IsStar bool `json:"is_star"`

	// jersey number
	JerseyNumber *int64 `json:"jersey_number"`

	// match score
	MatchScore *types.FloatWithZero `json:"match_score,omitempty"`

	// player
	Player *Player `json:"player,omitempty"`

	// position
	Position *string `json:"position"`

	// ppg
	Ppg float64 `json:"ppg,omitempty"`

	// team crest
	TeamCrest string `json:"team_crest"`

	// team id
	TeamID string `json:"team_id"`

	// team name
	TeamName string `json:"team_name"`
}

// Validate validates this match player
func (m *MatchPlayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchPlayer) validateMatchScore(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchScore) { // not required
		return nil
	}

	if m.MatchScore != nil {
		if err := m.MatchScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match_score")
			}
			return err
		}
	}

	return nil
}

func (m *MatchPlayer) validatePlayer(formats strfmt.Registry) error {
	if swag.IsZero(m.Player) { // not required
		return nil
	}

	if m.Player != nil {
		if err := m.Player.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("player")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("player")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this match player based on the context it is used
func (m *MatchPlayer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatchScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlayer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchPlayer) contextValidateMatchScore(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchScore != nil {

		if swag.IsZero(m.MatchScore) { // not required
			return nil
		}

		if err := m.MatchScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match_score")
			}
			return err
		}
	}

	return nil
}

func (m *MatchPlayer) contextValidatePlayer(ctx context.Context, formats strfmt.Registry) error {

	if m.Player != nil {

		if swag.IsZero(m.Player) { // not required
			return nil
		}

		if err := m.Player.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("player")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("player")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchPlayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchPlayer) UnmarshalBinary(b []byte) error {
	var res MatchPlayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

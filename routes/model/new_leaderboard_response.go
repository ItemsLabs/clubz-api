// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLeaderboardResponse new leaderboard response
//
// swagger:model NewLeaderboardResponse
type NewLeaderboardResponse struct {

	// division leaderboards
	DivisionLeaderboards []*DivisionLeaderboard `json:"division_leaderboards"`

	// progression bar
	ProgressionBar *ProgressionBar `json:"progression_bar,omitempty"`

	// week
	Week *GameWeek `json:"week,omitempty"`
}

// Validate validates this new leaderboard response
func (m *NewLeaderboardResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivisionLeaderboards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressionBar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewLeaderboardResponse) validateDivisionLeaderboards(formats strfmt.Registry) error {
	if swag.IsZero(m.DivisionLeaderboards) { // not required
		return nil
	}

	for i := 0; i < len(m.DivisionLeaderboards); i++ {
		if swag.IsZero(m.DivisionLeaderboards[i]) { // not required
			continue
		}

		if m.DivisionLeaderboards[i] != nil {
			if err := m.DivisionLeaderboards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("division_leaderboards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("division_leaderboards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewLeaderboardResponse) validateProgressionBar(formats strfmt.Registry) error {
	if swag.IsZero(m.ProgressionBar) { // not required
		return nil
	}

	if m.ProgressionBar != nil {
		if err := m.ProgressionBar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progression_bar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progression_bar")
			}
			return err
		}
	}

	return nil
}

func (m *NewLeaderboardResponse) validateWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.Week) { // not required
		return nil
	}

	if m.Week != nil {
		if err := m.Week.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("week")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("week")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this new leaderboard response based on the context it is used
func (m *NewLeaderboardResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDivisionLeaderboards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgressionBar(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewLeaderboardResponse) contextValidateDivisionLeaderboards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DivisionLeaderboards); i++ {

		if m.DivisionLeaderboards[i] != nil {

			if swag.IsZero(m.DivisionLeaderboards[i]) { // not required
				return nil
			}

			if err := m.DivisionLeaderboards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("division_leaderboards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("division_leaderboards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewLeaderboardResponse) contextValidateProgressionBar(ctx context.Context, formats strfmt.Registry) error {

	if m.ProgressionBar != nil {

		if swag.IsZero(m.ProgressionBar) { // not required
			return nil
		}

		if err := m.ProgressionBar.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progression_bar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progression_bar")
			}
			return err
		}
	}

	return nil
}

func (m *NewLeaderboardResponse) contextValidateWeek(ctx context.Context, formats strfmt.Registry) error {

	if m.Week != nil {

		if swag.IsZero(m.Week) { // not required
			return nil
		}

		if err := m.Week.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("week")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("week")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewLeaderboardResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewLeaderboardResponse) UnmarshalBinary(b []byte) error {
	var res NewLeaderboardResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelPowerupOption model powerup option
//
// swagger:model model.PowerupOption
type ModelPowerupOption string

func NewModelPowerupOption(value ModelPowerupOption) *ModelPowerupOption {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelPowerupOption.
func (m ModelPowerupOption) Pointer() *ModelPowerupOption {
	return &m
}

const (

	// ModelPowerupOptionX1515 captures enum value "x15_15"
	ModelPowerupOptionX1515 ModelPowerupOption = "x15_15"

	// ModelPowerupOptionX210 captures enum value "x2_10"
	ModelPowerupOptionX210 ModelPowerupOption = "x2_10"

	// ModelPowerupOptionX35 captures enum value "x3_5"
	ModelPowerupOptionX35 ModelPowerupOption = "x3_5"
)

// for schema
var modelPowerupOptionEnum []interface{}

func init() {
	var res []ModelPowerupOption
	if err := json.Unmarshal([]byte(`["x15_15","x2_10","x3_5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelPowerupOptionEnum = append(modelPowerupOptionEnum, v)
	}
}

func (m ModelPowerupOption) validateModelPowerupOptionEnum(path, location string, value ModelPowerupOption) error {
	if err := validate.EnumCase(path, location, value, modelPowerupOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model powerup option
func (m ModelPowerupOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelPowerupOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model powerup option based on context it is used
func (m ModelPowerupOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

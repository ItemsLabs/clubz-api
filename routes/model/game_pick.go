// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/itemslabs/clubz-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GamePick Footballer picked by a user playing a match
//
// swagger:model GamePick
type GamePick struct {

	// When was this player no longer owned. Null means the player is still owned
	// Format: date-time
	End *strfmt.DateTime `json:"end"`

	// game id
	GameID string `json:"game_id"`

	// id
	ID string `json:"id"`

	// image url
	ImageURL string `json:"image_url"`

	// is playing
	IsPlaying bool `json:"is_playing"`

	// The last modification of any event that is represented in the score
	// Format: date-time
	LastModifiedEvent strfmt.DateTime `json:"last_modified_event"`

	// card position starting with card 1 {1, 2, 3, 4}
	LineupPosition int64 `json:"lineup_position"`

	// minute
	Minute int64 `json:"minute"`

	// normalized name
	NormalizedName string `json:"normalized_name"`

	// player fullname
	PlayerFullname string `json:"player_fullname"`

	// player id
	PlayerID string `json:"player_id"`

	// player lastname
	PlayerLastname string `json:"player_lastname"`

	// player name
	PlayerName string `json:"player_name"`

	// player nickname
	PlayerNickname string `json:"player_nickname"`

	// Total points of the footballer pick, including powerup bonuses
	Score *types.FloatWithZero `json:"score,omitempty"`

	// second
	Second int64 `json:"second"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start"`

	// user swapped
	UserSwapped bool `json:"user_swapped"`
}

// Validate validates this game pick
func (m *GamePick) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamePick) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GamePick) validateLastModifiedEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedEvent) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified_event", "body", "date-time", m.LastModifiedEvent.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GamePick) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if m.Score != nil {
		if err := m.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

func (m *GamePick) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this game pick based on the context it is used
func (m *GamePick) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamePick) contextValidateScore(ctx context.Context, formats strfmt.Registry) error {

	if m.Score != nil {

		if swag.IsZero(m.Score) { // not required
			return nil
		}

		if err := m.Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamePick) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamePick) UnmarshalBinary(b []byte) error {
	var res GamePick
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

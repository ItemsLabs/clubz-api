// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaMatchHeadline schema match headline
//
// swagger:model schema.MatchHeadline
type SchemaMatchHeadline struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// image type
	ImageType *NullString `json:"image_type,omitempty"`

	// images
	Images string `json:"images,omitempty"`

	// match id
	MatchID string `json:"match_id,omitempty"`

	// screen type
	ScreenType int64 `json:"screen_type,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this schema match headline
func (m *SchemaMatchHeadline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaMatchHeadline) validateImageType(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageType) { // not required
		return nil
	}

	if m.ImageType != nil {
		if err := m.ImageType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schema match headline based on the context it is used
func (m *SchemaMatchHeadline) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaMatchHeadline) contextValidateImageType(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageType != nil {

		if swag.IsZero(m.ImageType) { // not required
			return nil
		}

		if err := m.ImageType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaMatchHeadline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaMatchHeadline) UnmarshalBinary(b []byte) error {
	var res SchemaMatchHeadline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

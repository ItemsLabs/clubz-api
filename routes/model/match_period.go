// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MatchPeriod status of game
//
// swagger:model MatchPeriod
type MatchPeriod string

func NewMatchPeriod(value MatchPeriod) *MatchPeriod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MatchPeriod.
func (m MatchPeriod) Pointer() *MatchPeriod {
	return &m
}

const (

	// MatchPeriodP captures enum value "p"
	MatchPeriodP MatchPeriod = "p"

	// MatchPeriodF captures enum value "f"
	MatchPeriodF MatchPeriod = "f"

	// MatchPeriodH captures enum value "h"
	MatchPeriodH MatchPeriod = "h"

	// MatchPeriodS captures enum value "s"
	MatchPeriodS MatchPeriod = "s"

	// MatchPeriodBx1 captures enum value "bx1"
	MatchPeriodBx1 MatchPeriod = "bx1"

	// MatchPeriodX1 captures enum value "x1"
	MatchPeriodX1 MatchPeriod = "x1"

	// MatchPeriodBx2 captures enum value "bx2"
	MatchPeriodBx2 MatchPeriod = "bx2"

	// MatchPeriodX2 captures enum value "x2"
	MatchPeriodX2 MatchPeriod = "x2"

	// MatchPeriodBp captures enum value "bp"
	MatchPeriodBp MatchPeriod = "bp"

	// MatchPeriodPe captures enum value "pe"
	MatchPeriodPe MatchPeriod = "pe"

	// MatchPeriodPg captures enum value "pg"
	MatchPeriodPg MatchPeriod = "pg"
)

// for schema
var matchPeriodEnum []interface{}

func init() {
	var res []MatchPeriod
	if err := json.Unmarshal([]byte(`["p","f","h","s","bx1","x1","bx2","x2","bp","pe","pg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		matchPeriodEnum = append(matchPeriodEnum, v)
	}
}

func (m MatchPeriod) validateMatchPeriodEnum(path, location string, value MatchPeriod) error {
	if err := validate.EnumCase(path, location, value, matchPeriodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this match period
func (m MatchPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMatchPeriodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this match period based on context it is used
func (m MatchPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

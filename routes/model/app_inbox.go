// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInbox app inbox
//
// swagger:model AppInbox
type AppInbox struct {

	// category
	Category string `json:"category"`

	// claimed
	Claimed bool `json:"claimed"`

	// claimed at
	// Format: date-time
	ClaimedAt strfmt.DateTime `json:"claimed_at,omitempty"`

	// clear
	Clear bool `json:"clear"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at"`

	// description
	Description string `json:"description"`

	// game
	Game string `json:"game,omitempty"`

	// game week
	GameWeek string `json:"game_week,omitempty"`

	// id
	ID string `json:"id"`

	// image url
	ImageURL string `json:"image_url,omitempty"`

	// link url
	LinkURL string `json:"link_url,omitempty"`

	// match
	Match string `json:"match,omitempty"`

	// priority
	Priority string `json:"priority"`

	// read
	Read bool `json:"read"`

	// reward
	Reward *Rewards `json:"reward,omitempty"`

	// status
	Status string `json:"status"`

	// title
	Title string `json:"title"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at"`

	// user
	User *User `json:"user,omitempty"`
}

// Validate validates this app inbox
func (m *AppInbox) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInbox) validateClaimedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ClaimedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("claimed_at", "body", "date-time", m.ClaimedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppInbox) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppInbox) validateReward(formats strfmt.Registry) error {
	if swag.IsZero(m.Reward) { // not required
		return nil
	}

	if m.Reward != nil {
		if err := m.Reward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

func (m *AppInbox) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppInbox) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app inbox based on the context it is used
func (m *AppInbox) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReward(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInbox) contextValidateReward(ctx context.Context, formats strfmt.Registry) error {

	if m.Reward != nil {

		if swag.IsZero(m.Reward) { // not required
			return nil
		}

		if err := m.Reward.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

func (m *AppInbox) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInbox) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInbox) UnmarshalBinary(b []byte) error {
	var res AppInbox
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

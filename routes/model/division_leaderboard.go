// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DivisionLeaderboard division leaderboard
//
// swagger:model DivisionLeaderboard
type DivisionLeaderboard struct {

	// division id
	DivisionID string `json:"division_id"`

	// division rewards
	DivisionRewards []*DivisionReward `json:"division_rewards"`

	// division tier
	DivisionTier int64 `json:"division_tier"`

	// leaderboard
	Leaderboard []*NewLeaderboardEntry `json:"leaderboard"`
}

// Validate validates this division leaderboard
func (m *DivisionLeaderboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivisionRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeaderboard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DivisionLeaderboard) validateDivisionRewards(formats strfmt.Registry) error {
	if swag.IsZero(m.DivisionRewards) { // not required
		return nil
	}

	for i := 0; i < len(m.DivisionRewards); i++ {
		if swag.IsZero(m.DivisionRewards[i]) { // not required
			continue
		}

		if m.DivisionRewards[i] != nil {
			if err := m.DivisionRewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("division_rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("division_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DivisionLeaderboard) validateLeaderboard(formats strfmt.Registry) error {
	if swag.IsZero(m.Leaderboard) { // not required
		return nil
	}

	for i := 0; i < len(m.Leaderboard); i++ {
		if swag.IsZero(m.Leaderboard[i]) { // not required
			continue
		}

		if m.Leaderboard[i] != nil {
			if err := m.Leaderboard[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("leaderboard" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("leaderboard" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this division leaderboard based on the context it is used
func (m *DivisionLeaderboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDivisionRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLeaderboard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DivisionLeaderboard) contextValidateDivisionRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DivisionRewards); i++ {

		if m.DivisionRewards[i] != nil {

			if swag.IsZero(m.DivisionRewards[i]) { // not required
				return nil
			}

			if err := m.DivisionRewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("division_rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("division_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DivisionLeaderboard) contextValidateLeaderboard(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Leaderboard); i++ {

		if m.Leaderboard[i] != nil {

			if swag.IsZero(m.Leaderboard[i]) { // not required
				return nil
			}

			if err := m.Leaderboard[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("leaderboard" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("leaderboard" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DivisionLeaderboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DivisionLeaderboard) UnmarshalBinary(b []byte) error {
	var res DivisionLeaderboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

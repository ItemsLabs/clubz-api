// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGameWeekHistory user game week history
//
// swagger:model UserGameWeekHistory
type UserGameWeekHistory struct {

	// game week
	// Format: uuid
	GameWeek strfmt.UUID `json:"game_week,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// new division
	// Format: uuid
	NewDivision *strfmt.UUID `json:"new_division,omitempty"`

	// new division tier
	NewDivisionTier *int64 `json:"new_division_tier,omitempty"`

	// Status of the user in the game week (s: Safe, p: Promoted, d: Demoted)
	// Enum: [s p d]
	Status string `json:"status,omitempty"`

	// user
	// Format: uuid
	User strfmt.UUID `json:"user,omitempty"`

	// week average rank
	WeekAverageRank *float64 `json:"week_average_rank,omitempty"`

	// week coins
	WeekCoins int64 `json:"week_coins"`

	// week division
	// Format: uuid
	WeekDivision *strfmt.UUID `json:"week_division,omitempty"`

	// week division position
	WeekDivisionPosition int64 `json:"week_division_position,omitempty"`

	// week division tier
	WeekDivisionTier *int64 `json:"week_division_tier,omitempty"`

	// week matches played
	WeekMatchesPlayed *int64 `json:"week_matches_played,omitempty"`

	// week points
	WeekPoints int64 `json:"week_points"`
}

// Validate validates this user game week history
func (m *UserGameWeekHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGameWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekDivision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGameWeekHistory) validateGameWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.GameWeek) { // not required
		return nil
	}

	if err := validate.FormatOf("game_week", "body", "uuid", m.GameWeek.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserGameWeekHistory) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserGameWeekHistory) validateNewDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.NewDivision) { // not required
		return nil
	}

	if err := validate.FormatOf("new_division", "body", "uuid", m.NewDivision.String(), formats); err != nil {
		return err
	}

	return nil
}

var userGameWeekHistoryTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s","p","d"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userGameWeekHistoryTypeStatusPropEnum = append(userGameWeekHistoryTypeStatusPropEnum, v)
	}
}

const (

	// UserGameWeekHistoryStatusS captures enum value "s"
	UserGameWeekHistoryStatusS string = "s"

	// UserGameWeekHistoryStatusP captures enum value "p"
	UserGameWeekHistoryStatusP string = "p"

	// UserGameWeekHistoryStatusD captures enum value "d"
	UserGameWeekHistoryStatusD string = "d"
)

// prop value enum
func (m *UserGameWeekHistory) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userGameWeekHistoryTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserGameWeekHistory) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UserGameWeekHistory) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if err := validate.FormatOf("user", "body", "uuid", m.User.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserGameWeekHistory) validateWeekDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekDivision) { // not required
		return nil
	}

	if err := validate.FormatOf("week_division", "body", "uuid", m.WeekDivision.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user game week history based on context it is used
func (m *UserGameWeekHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserGameWeekHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGameWeekHistory) UnmarshalBinary(b []byte) error {
	var res UserGameWeekHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

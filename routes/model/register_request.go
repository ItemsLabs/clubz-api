// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/itemslabs/clubz-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterRequest register request
//
// swagger:model RegisterRequest
type RegisterRequest struct {

	// account type
	// Required: true
	// Enum: [guest premium]
	AccountType *string `json:"accountType"`

	// avatar url
	AvatarURL *string `json:"avatar_url"`

	// balance
	Balance *types.FloatWithZero `json:"balance,omitempty"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// firebase id
	FirebaseID *string `json:"firebase_id"`

	// name
	Name string `json:"name"`

	// password
	// Required: true
	Password *string `json:"password"`

	// paypal email
	PaypalEmail *string `json:"paypal_email"`

	// ref code
	RefCode *string `json:"ref_code"`

	// ref code id
	RefCodeID *string `json:"ref_code_id"`

	// wallet address
	// Required: true
	WalletAddress *string `json:"wallet_address"`
}

// Validate validates this register request
func (m *RegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var registerRequestTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["guest","premium"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerRequestTypeAccountTypePropEnum = append(registerRequestTypeAccountTypePropEnum, v)
	}
}

const (

	// RegisterRequestAccountTypeGuest captures enum value "guest"
	RegisterRequestAccountTypeGuest string = "guest"

	// RegisterRequestAccountTypePremium captures enum value "premium"
	RegisterRequestAccountTypePremium string = "premium"
)

// prop value enum
func (m *RegisterRequest) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerRequestTypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterRequest) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("accountType", "body", m.AccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", *m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validateWalletAddress(formats strfmt.Registry) error {

	if err := validate.Required("wallet_address", "body", m.WalletAddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this register request based on the context it is used
func (m *RegisterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterRequest) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {

		if swag.IsZero(m.Balance) { // not required
			return nil
		}

		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterRequest) UnmarshalBinary(b []byte) error {
	var res RegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

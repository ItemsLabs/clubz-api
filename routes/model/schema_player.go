// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaPlayer schema player
//
// swagger:model schema.Player
type SchemaPlayer struct {

	// avg score
	AvgScore *NullFloat64 `json:"avg_score,omitempty"`

	// birth date
	BirthDate string `json:"birth_date,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// first name
	FirstName *NullString `json:"first_name,omitempty"`

	// full name
	FullName *NullString `json:"full_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image url
	ImageURL *NullString `json:"image_url,omitempty"`

	// import id
	ImportID *NullString `json:"import_id,omitempty"`

	// last name
	LastName *NullString `json:"last_name,omitempty"`

	// nick name
	NickName *NullString `json:"nick_name,omitempty"`

	// soccer wiki player id
	SoccerWikiPlayerID *NullInt `json:"soccer_wiki_player_id,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this schema player
func (m *SchemaPlayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvgScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoccerWikiPlayerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaPlayer) validateAvgScore(formats strfmt.Registry) error {
	if swag.IsZero(m.AvgScore) { // not required
		return nil
	}

	if m.AvgScore != nil {
		if err := m.AvgScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avg_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avg_score")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if m.FirstName != nil {
		if err := m.FirstName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("first_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("first_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateFullName(formats strfmt.Registry) error {
	if swag.IsZero(m.FullName) { // not required
		return nil
	}

	if m.FullName != nil {
		if err := m.FullName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateImageURL(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageURL) { // not required
		return nil
	}

	if m.ImageURL != nil {
		if err := m.ImageURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_url")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_url")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateImportID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportID) { // not required
		return nil
	}

	if m.ImportID != nil {
		if err := m.ImportID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if m.LastName != nil {
		if err := m.LastName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateNickName(formats strfmt.Registry) error {
	if swag.IsZero(m.NickName) { // not required
		return nil
	}

	if m.NickName != nil {
		if err := m.NickName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nick_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nick_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) validateSoccerWikiPlayerID(formats strfmt.Registry) error {
	if swag.IsZero(m.SoccerWikiPlayerID) { // not required
		return nil
	}

	if m.SoccerWikiPlayerID != nil {
		if err := m.SoccerWikiPlayerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("soccer_wiki_player_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("soccer_wiki_player_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schema player based on the context it is used
func (m *SchemaPlayer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvgScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNickName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoccerWikiPlayerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaPlayer) contextValidateAvgScore(ctx context.Context, formats strfmt.Registry) error {

	if m.AvgScore != nil {

		if swag.IsZero(m.AvgScore) { // not required
			return nil
		}

		if err := m.AvgScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avg_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avg_score")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateFirstName(ctx context.Context, formats strfmt.Registry) error {

	if m.FirstName != nil {

		if swag.IsZero(m.FirstName) { // not required
			return nil
		}

		if err := m.FirstName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("first_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("first_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateFullName(ctx context.Context, formats strfmt.Registry) error {

	if m.FullName != nil {

		if swag.IsZero(m.FullName) { // not required
			return nil
		}

		if err := m.FullName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateImageURL(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageURL != nil {

		if swag.IsZero(m.ImageURL) { // not required
			return nil
		}

		if err := m.ImageURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_url")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_url")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateImportID(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportID != nil {

		if swag.IsZero(m.ImportID) { // not required
			return nil
		}

		if err := m.ImportID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateLastName(ctx context.Context, formats strfmt.Registry) error {

	if m.LastName != nil {

		if swag.IsZero(m.LastName) { // not required
			return nil
		}

		if err := m.LastName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateNickName(ctx context.Context, formats strfmt.Registry) error {

	if m.NickName != nil {

		if swag.IsZero(m.NickName) { // not required
			return nil
		}

		if err := m.NickName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nick_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nick_name")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaPlayer) contextValidateSoccerWikiPlayerID(ctx context.Context, formats strfmt.Registry) error {

	if m.SoccerWikiPlayerID != nil {

		if swag.IsZero(m.SoccerWikiPlayerID) { // not required
			return nil
		}

		if err := m.SoccerWikiPlayerID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("soccer_wiki_player_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("soccer_wiki_player_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaPlayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaPlayer) UnmarshalBinary(b []byte) error {
	var res SchemaPlayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

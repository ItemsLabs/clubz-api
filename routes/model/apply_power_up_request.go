// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplyPowerUpRequest apply power up request
//
// swagger:model ApplyPowerUpRequest
type ApplyPowerUpRequest struct {

	// lineup position
	// Example: 1
	LineupPosition int64 `json:"lineup_position,omitempty"`

	// option
	Option PowerupOption `json:"option,omitempty"`

	// powerup id
	// Example: 1
	// Required: true
	PowerupID *int64 `json:"powerup_id"`
}

// Validate validates this apply power up request
func (m *ApplyPowerUpRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplyPowerUpRequest) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.Option) { // not required
		return nil
	}

	if err := m.Option.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("option")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("option")
		}
		return err
	}

	return nil
}

func (m *ApplyPowerUpRequest) validatePowerupID(formats strfmt.Registry) error {

	if err := validate.Required("powerup_id", "body", m.PowerupID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this apply power up request based on the context it is used
func (m *ApplyPowerUpRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplyPowerUpRequest) contextValidateOption(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Option) { // not required
		return nil
	}

	if err := m.Option.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("option")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("option")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplyPowerUpRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplyPowerUpRequest) UnmarshalBinary(b []byte) error {
	var res ApplyPowerUpRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

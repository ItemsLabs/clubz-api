// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoricalGamePlayer historical game player
//
// swagger:model HistoricalGamePlayer
type HistoricalGamePlayer struct {

	// When was this player no longer owned. Null means the player is still owned
	// Format: date-time
	End *strfmt.DateTime `json:"end"`

	// fullname
	Fullname string `json:"fullname"`

	// id
	ID string `json:"id"`

	// image url
	ImageURL string `json:"image_url"`

	// lastname
	Lastname string `json:"lastname"`

	// card position starting with card 1 {1, 2, 3, 4}
	LineupPosition int64 `json:"lineup_position"`

	// name
	Name string `json:"name"`

	// nickname
	Nickname string `json:"nickname"`

	// score
	Score float64 `json:"score"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start"`
}

// Validate validates this historical game player
func (m *HistoricalGamePlayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoricalGamePlayer) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HistoricalGamePlayer) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this historical game player based on context it is used
func (m *HistoricalGamePlayer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HistoricalGamePlayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoricalGamePlayer) UnmarshalBinary(b []byte) error {
	var res HistoricalGamePlayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GameWeek game week
//
// swagger:model GameWeek
type GameWeek struct {

	// end at
	// Format: date-time
	EndAt strfmt.DateTime `json:"end_at"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name"`

	// start at
	// Format: date-time
	StartAt strfmt.DateTime `json:"start_at"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this game week
func (m *GameWeek) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GameWeek) validateEndAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("end_at", "body", "date-time", m.EndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GameWeek) validateStartAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartAt) { // not required
		return nil
	}

	if err := validate.FormatOf("start_at", "body", "date-time", m.StartAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this game week based on context it is used
func (m *GameWeek) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GameWeek) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GameWeek) UnmarshalBinary(b []byte) error {
	var res GameWeek
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

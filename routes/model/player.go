// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/gameon-app-inc/laliga-matchfantasy-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Player player
//
// swagger:model Player
type Player struct {

	// avg score
	AvgScore *types.FloatWithZero `json:"avg_score,omitempty"`

	// full name
	FullName string `json:"full_name"`

	// id
	ID string `json:"id,omitempty"`

	// image url
	ImageURL *string `json:"image_url"`

	// import id
	ImportID *string `json:"import_id"`

	// normalized name
	NormalizedName string `json:"normalized_name"`
}

// Validate validates this player
func (m *Player) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvgScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Player) validateAvgScore(formats strfmt.Registry) error {
	if swag.IsZero(m.AvgScore) { // not required
		return nil
	}

	if m.AvgScore != nil {
		if err := m.AvgScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avg_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avg_score")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this player based on the context it is used
func (m *Player) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvgScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Player) contextValidateAvgScore(ctx context.Context, formats strfmt.Registry) error {

	if m.AvgScore != nil {

		if swag.IsZero(m.AvgScore) { // not required
			return nil
		}

		if err := m.AvgScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avg_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avg_score")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Player) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Player) UnmarshalBinary(b []byte) error {
	var res Player
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

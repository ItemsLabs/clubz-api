// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/itemslabs/clubz-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MatchReward match reward
//
// swagger:model MatchReward
type MatchReward struct {

	// amount
	Amount *types.FloatWithZero `json:"amount,omitempty"`

	// balls
	Balls int64 `json:"balls"`

	// event
	Event int64 `json:"event"`

	// game
	Game float64 `json:"game"`

	// kick off pack 1
	KickOffPack1 int64 `json:"kick_off_pack_1"`

	// kick off pack 2
	KickOffPack2 int64 `json:"kick_off_pack_2"`

	// kick off pack 3
	KickOffPack3 int64 `json:"kick_off_pack_3"`

	// lapt
	Lapt float64 `json:"lapt"`

	// Maximum position for this reward range (nullable)
	MaxPosition *int64 `json:"max_position"`

	// Minimum position for this reward range
	MinPosition int64 `json:"min_position,omitempty"`

	// position
	Position *int64 `json:"position,omitempty"`

	// season pack 1
	SeasonPack1 int64 `json:"season_pack_1"`

	// season pack 2
	SeasonPack2 int64 `json:"season_pack_2"`

	// season pack 3
	SeasonPack3 int64 `json:"season_pack_3"`

	// shirts
	Shirts int64 `json:"shirts"`

	// signed balls
	SignedBalls int64 `json:"signed_balls"`

	// signed shirts
	SignedShirts int64 `json:"signed_shirts"`
}

// Validate validates this match reward
func (m *MatchReward) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchReward) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this match reward based on the context it is used
func (m *MatchReward) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchReward) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {

		if swag.IsZero(m.Amount) { // not required
			return nil
		}

		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchReward) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchReward) UnmarshalBinary(b []byte) error {
	var res MatchReward
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

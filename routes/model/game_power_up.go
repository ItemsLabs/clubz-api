// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/gameon-app-inc/laliga-matchfantasy-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GamePowerUp game power up
//
// swagger:model GamePowerUp
type GamePowerUp struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at"`

	// duration
	Duration int64 `json:"duration"`

	// null end means that powerup still active
	// Format: date-time
	EndedAt *strfmt.DateTime `json:"ended_at"`

	// game id
	GameID string `json:"game_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// lineup position
	LineupPosition int64 `json:"lineup_position"`

	// minute
	Minute int64 `json:"minute"`

	// Multiplier
	Multiplier *types.FloatWithZero `json:"multiplier,omitempty"`

	// powerup id
	PowerupID int64 `json:"powerup_id,omitempty"`

	// powerup name
	PowerupName string `json:"powerup_name"`

	// second
	Second int64 `json:"second"`
}

// Validate validates this game power up
func (m *GamePowerUp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiplier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamePowerUp) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GamePowerUp) validateEndedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ended_at", "body", "date-time", m.EndedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GamePowerUp) validateMultiplier(formats strfmt.Registry) error {
	if swag.IsZero(m.Multiplier) { // not required
		return nil
	}

	if m.Multiplier != nil {
		if err := m.Multiplier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiplier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiplier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this game power up based on the context it is used
func (m *GamePowerUp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMultiplier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamePowerUp) contextValidateMultiplier(ctx context.Context, formats strfmt.Registry) error {

	if m.Multiplier != nil {

		if swag.IsZero(m.Multiplier) { // not required
			return nil
		}

		if err := m.Multiplier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiplier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiplier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamePowerUp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamePowerUp) UnmarshalBinary(b []byte) error {
	var res GamePowerUp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

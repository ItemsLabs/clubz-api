// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelSubscriptionTier model subscription tier
//
// swagger:model model.SubscriptionTier
type ModelSubscriptionTier string

func NewModelSubscriptionTier(value ModelSubscriptionTier) *ModelSubscriptionTier {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelSubscriptionTier.
func (m ModelSubscriptionTier) Pointer() *ModelSubscriptionTier {
	return &m
}

const (

	// ModelSubscriptionTierNone captures enum value "none"
	ModelSubscriptionTierNone ModelSubscriptionTier = "none"

	// ModelSubscriptionTierPremium captures enum value "premium"
	ModelSubscriptionTierPremium ModelSubscriptionTier = "premium"

	// ModelSubscriptionTierLite captures enum value "lite"
	ModelSubscriptionTierLite ModelSubscriptionTier = "lite"
)

// for schema
var modelSubscriptionTierEnum []interface{}

func init() {
	var res []ModelSubscriptionTier
	if err := json.Unmarshal([]byte(`["none","premium","lite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelSubscriptionTierEnum = append(modelSubscriptionTierEnum, v)
	}
}

func (m ModelSubscriptionTier) validateModelSubscriptionTierEnum(path, location string, value ModelSubscriptionTier) error {
	if err := validate.EnumCase(path, location, value, modelSubscriptionTierEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model subscription tier
func (m ModelSubscriptionTier) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelSubscriptionTierEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model subscription tier based on context it is used
func (m ModelSubscriptionTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MatchStatus status of game
//
// swagger:model MatchStatus
type MatchStatus string

func NewMatchStatus(value MatchStatus) *MatchStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MatchStatus.
func (m MatchStatus) Pointer() *MatchStatus {
	return &m
}

const (

	// MatchStatusU captures enum value "u"
	MatchStatusU MatchStatus = "u"

	// MatchStatusW captures enum value "w"
	MatchStatusW MatchStatus = "w"

	// MatchStatusL captures enum value "l"
	MatchStatusL MatchStatus = "l"

	// MatchStatusG captures enum value "g"
	MatchStatusG MatchStatus = "g"

	// MatchStatusE captures enum value "e"
	MatchStatusE MatchStatus = "e"

	// MatchStatusC captures enum value "c"
	MatchStatusC MatchStatus = "c"
)

// for schema
var matchStatusEnum []interface{}

func init() {
	var res []MatchStatus
	if err := json.Unmarshal([]byte(`["u","w","l","g","e","c"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		matchStatusEnum = append(matchStatusEnum, v)
	}
}

func (m MatchStatus) validateMatchStatusEnum(path, location string, value MatchStatus) error {
	if err := validate.EnumCase(path, location, value, matchStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this match status
func (m MatchStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMatchStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this match status based on context it is used
func (m MatchStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

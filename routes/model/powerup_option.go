// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PowerupOption status of game
//
// swagger:model PowerupOption
type PowerupOption string

func NewPowerupOption(value PowerupOption) *PowerupOption {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PowerupOption.
func (m PowerupOption) Pointer() *PowerupOption {
	return &m
}

const (

	// PowerupOptionX1515 captures enum value "x15_15"
	PowerupOptionX1515 PowerupOption = "x15_15"

	// PowerupOptionX210 captures enum value "x2_10"
	PowerupOptionX210 PowerupOption = "x2_10"

	// PowerupOptionX35 captures enum value "x3_5"
	PowerupOptionX35 PowerupOption = "x3_5"
)

// for schema
var powerupOptionEnum []interface{}

func init() {
	var res []PowerupOption
	if err := json.Unmarshal([]byte(`["x15_15","x2_10","x3_5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		powerupOptionEnum = append(powerupOptionEnum, v)
	}
}

func (m PowerupOption) validatePowerupOptionEnum(path, location string, value PowerupOption) error {
	if err := validate.EnumCase(path, location, value, powerupOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this powerup option
func (m PowerupOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePowerupOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this powerup option based on context it is used
func (m PowerupOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

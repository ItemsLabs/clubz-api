// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/gameon-app-inc/laliga-matchfantasy-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LeaderboardEntry leaderboard entry
//
// swagger:model LeaderboardEntry
type LeaderboardEntry struct {

	// position
	Position int64 `json:"position"`

	// premium
	Premium bool `json:"premium"`

	// reward
	Reward *types.FloatWithZero `json:"reward,omitempty"`

	// score
	Score *types.FloatWithZero `json:"score,omitempty"`

	// subscription tier
	SubscriptionTier SubscriptionTier `json:"subscription_tier,omitempty"`

	// user avatar url
	UserAvatarURL string `json:"user_avatar_url"`

	// user id
	UserID string `json:"user_id"`

	// user name
	UserName string `json:"user_name"`
}

// Validate validates this leaderboard entry
func (m *LeaderboardEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderboardEntry) validateReward(formats strfmt.Registry) error {
	if swag.IsZero(m.Reward) { // not required
		return nil
	}

	if m.Reward != nil {
		if err := m.Reward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

func (m *LeaderboardEntry) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if m.Score != nil {
		if err := m.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

func (m *LeaderboardEntry) validateSubscriptionTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	if err := m.SubscriptionTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subscription_tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("subscription_tier")
		}
		return err
	}

	return nil
}

// ContextValidate validate this leaderboard entry based on the context it is used
func (m *LeaderboardEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReward(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptionTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderboardEntry) contextValidateReward(ctx context.Context, formats strfmt.Registry) error {

	if m.Reward != nil {

		if swag.IsZero(m.Reward) { // not required
			return nil
		}

		if err := m.Reward.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

func (m *LeaderboardEntry) contextValidateScore(ctx context.Context, formats strfmt.Registry) error {

	if m.Score != nil {

		if swag.IsZero(m.Score) { // not required
			return nil
		}

		if err := m.Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

func (m *LeaderboardEntry) contextValidateSubscriptionTier(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	if err := m.SubscriptionTier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subscription_tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("subscription_tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeaderboardEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeaderboardEntry) UnmarshalBinary(b []byte) error {
	var res LeaderboardEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/gameon-app-inc/laliga-matchfantasy-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GameEvent Individual action for which points are awarded
//
// swagger:model GameEvent
type GameEvent struct {

	// boost multiplier
	BoostMultiplier float64 `json:"boost_multiplier"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// id
	ID string `json:"id"`

	// initial score
	InitialScore *types.FloatWithZero `json:"initial_score,omitempty"`

	// minute
	Minute int64 `json:"minute"`

	// name
	Name string `json:"name"`

	// nft image url
	NftImageURL string `json:"nft_image_url"`

	// nft multiplier
	NftMultiplier float64 `json:"nft_multiplier"`

	// player id
	PlayerID string `json:"player_id"`

	// player image url
	PlayerImageURL string `json:"player_image_url"`

	// player name
	PlayerName string `json:"player_name"`

	// power up name
	PowerUpName string `json:"power_up_name"`

	// powered up
	PoweredUp bool `json:"powered_up"`

	// score
	Score *types.FloatWithZero `json:"score,omitempty"`

	// second
	Second int64 `json:"second"`

	// team id
	TeamID string `json:"team_id"`
}

// Validate validates this game event
func (m *GameEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GameEvent) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GameEvent) validateInitialScore(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialScore) { // not required
		return nil
	}

	if m.InitialScore != nil {
		if err := m.InitialScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_score")
			}
			return err
		}
	}

	return nil
}

func (m *GameEvent) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if m.Score != nil {
		if err := m.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this game event based on the context it is used
func (m *GameEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInitialScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GameEvent) contextValidateInitialScore(ctx context.Context, formats strfmt.Registry) error {

	if m.InitialScore != nil {

		if swag.IsZero(m.InitialScore) { // not required
			return nil
		}

		if err := m.InitialScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_score")
			}
			return err
		}
	}

	return nil
}

func (m *GameEvent) contextValidateScore(ctx context.Context, formats strfmt.Registry) error {

	if m.Score != nil {

		if swag.IsZero(m.Score) { // not required
			return nil
		}

		if err := m.Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GameEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GameEvent) UnmarshalBinary(b []byte) error {
	var res GameEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

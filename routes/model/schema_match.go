// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaMatch schema match
//
// swagger:model schema.Match
type SchemaMatch struct {

	// away score
	AwayScore int64 `json:"away_score,omitempty"`

	// away team id
	AwayTeamID string `json:"away_team_id,omitempty"`

	// away team selection id
	AwayTeamSelectionID *NullString `json:"away_team_selection_id,omitempty"`

	// competition id
	CompetitionID string `json:"competition_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// f end
	FEnd string `json:"f_end,omitempty"`

	// f start
	FStart string `json:"f_start,omitempty"`

	// has lineups
	HasLineups bool `json:"has_lineups,omitempty"`

	// home score
	HomeScore int64 `json:"home_score,omitempty"`

	// home team id
	HomeTeamID string `json:"home_team_id,omitempty"`

	// home team selection id
	HomeTeamSelectionID *NullString `json:"home_team_selection_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// import id
	ImportID *NullString `json:"import_id,omitempty"`

	// last processed id
	LastProcessedID *NullString `json:"last_processed_id,omitempty"`

	// last synced at
	LastSyncedAt string `json:"last_synced_at,omitempty"`

	// match end
	MatchEnd string `json:"match_end,omitempty"`

	// match time
	MatchTime string `json:"match_time,omitempty"`

	// match type
	MatchType int64 `json:"match_type,omitempty"`

	// minute
	Minute int64 `json:"minute,omitempty"`

	// p end
	PEnd string `json:"p_end,omitempty"`

	// p start
	PStart string `json:"p_start,omitempty"`

	// period
	Period string `json:"period,omitempty"`

	// rewarded
	Rewarded bool `json:"rewarded,omitempty"`

	// s end
	SEnd string `json:"s_end,omitempty"`

	// s start
	SStart string `json:"s_start,omitempty"`

	// season id
	SeasonID string `json:"season_id,omitempty"`

	// second
	Second int64 `json:"second,omitempty"`

	// simulation from match id
	SimulationFromMatchID *NullString `json:"simulation_from_match_id,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`

	// x1 end
	X1End string `json:"x1_end,omitempty"`

	// x1 start
	X1Start string `json:"x1_start,omitempty"`

	// x2 end
	X2End string `json:"x2_end,omitempty"`

	// x2 start
	X2Start string `json:"x2_start,omitempty"`
}

// Validate validates this schema match
func (m *SchemaMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwayTeamSelectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeTeamSelectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastProcessedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimulationFromMatchID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaMatch) validateAwayTeamSelectionID(formats strfmt.Registry) error {
	if swag.IsZero(m.AwayTeamSelectionID) { // not required
		return nil
	}

	if m.AwayTeamSelectionID != nil {
		if err := m.AwayTeamSelectionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("away_team_selection_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("away_team_selection_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) validateHomeTeamSelectionID(formats strfmt.Registry) error {
	if swag.IsZero(m.HomeTeamSelectionID) { // not required
		return nil
	}

	if m.HomeTeamSelectionID != nil {
		if err := m.HomeTeamSelectionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("home_team_selection_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("home_team_selection_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) validateImportID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportID) { // not required
		return nil
	}

	if m.ImportID != nil {
		if err := m.ImportID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) validateLastProcessedID(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProcessedID) { // not required
		return nil
	}

	if m.LastProcessedID != nil {
		if err := m.LastProcessedID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_processed_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_processed_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) validateSimulationFromMatchID(formats strfmt.Registry) error {
	if swag.IsZero(m.SimulationFromMatchID) { // not required
		return nil
	}

	if m.SimulationFromMatchID != nil {
		if err := m.SimulationFromMatchID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simulation_from_match_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simulation_from_match_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schema match based on the context it is used
func (m *SchemaMatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwayTeamSelectionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHomeTeamSelectionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastProcessedID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSimulationFromMatchID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaMatch) contextValidateAwayTeamSelectionID(ctx context.Context, formats strfmt.Registry) error {

	if m.AwayTeamSelectionID != nil {

		if swag.IsZero(m.AwayTeamSelectionID) { // not required
			return nil
		}

		if err := m.AwayTeamSelectionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("away_team_selection_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("away_team_selection_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) contextValidateHomeTeamSelectionID(ctx context.Context, formats strfmt.Registry) error {

	if m.HomeTeamSelectionID != nil {

		if swag.IsZero(m.HomeTeamSelectionID) { // not required
			return nil
		}

		if err := m.HomeTeamSelectionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("home_team_selection_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("home_team_selection_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) contextValidateImportID(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportID != nil {

		if swag.IsZero(m.ImportID) { // not required
			return nil
		}

		if err := m.ImportID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) contextValidateLastProcessedID(ctx context.Context, formats strfmt.Registry) error {

	if m.LastProcessedID != nil {

		if swag.IsZero(m.LastProcessedID) { // not required
			return nil
		}

		if err := m.LastProcessedID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_processed_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_processed_id")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaMatch) contextValidateSimulationFromMatchID(ctx context.Context, formats strfmt.Registry) error {

	if m.SimulationFromMatchID != nil {

		if swag.IsZero(m.SimulationFromMatchID) { // not required
			return nil
		}

		if err := m.SimulationFromMatchID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simulation_from_match_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simulation_from_match_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaMatch) UnmarshalBinary(b []byte) error {
	var res SchemaMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

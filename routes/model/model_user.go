// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelUser model user
//
// swagger:model model.User
type ModelUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// avg points
	AvgPoints int64 `json:"avg_points,omitempty"`

	// avg rank
	AvgRank int64 `json:"avg_rank,omitempty"`

	// avg rank percent
	AvgRankPercent int64 `json:"avg_rank_percent,omitempty"`

	// follower count
	FollowerCount int64 `json:"follower_count,omitempty"`

	// following count
	FollowingCount int64 `json:"following_count,omitempty"`

	// games played
	GamesPlayed int64 `json:"games_played,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// influencer
	Influencer bool `json:"influencer,omitempty"`

	// is following
	IsFollowing bool `json:"is_following,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// premium
	Premium bool `json:"premium,omitempty"`

	// subscription tier
	SubscriptionTier struct {
		ModelSubscriptionTier
	} `json:"subscription_tier,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`

	// wallet address
	WalletAddress string `json:"wallet_address,omitempty"`
}

// Validate validates this model user
func (m *ModelUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscriptionTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelUser) validateSubscriptionTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this model user based on the context it is used
func (m *ModelUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubscriptionTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelUser) contextValidateSubscriptionTier(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelUser) UnmarshalBinary(b []byte) error {
	var res ModelUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

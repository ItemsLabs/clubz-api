// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// amount
	// Multiple Of: 0.01
	Amount float64 `json:"amount,omitempty"`

	// blockchain order status
	BlockchainOrderStatus BlockchainStatus `json:"blockchain_order_status,omitempty"`

	// blockchain uuid
	BlockchainUUID string `json:"blockchain_uuid,omitempty"`

	// cancel url
	CancelURL string `json:"cancel_url,omitempty"`

	// contract
	Contract string `json:"contract,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// delivered
	Delivered bool `json:"delivered,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// item id
	ItemID int32 `json:"item_id,omitempty"`

	// payment platform status
	PaymentPlatformStatus PaymentPlatformStatus `json:"payment_platform_status,omitempty"`

	// payment platform type
	PaymentPlatformType PaymentType `json:"payment_platform_type,omitempty"`

	// payment platform url
	PaymentPlatformURL string `json:"payment_platform_url,omitempty"`

	// payment platform uuid
	PaymentPlatformUUID string `json:"payment_platform_uuid,omitempty"`

	// purchased at
	// Format: date-time
	PurchasedAt strfmt.DateTime `json:"purchased_at,omitempty"`

	// quantity
	Quantity int32 `json:"quantity,omitempty"`

	// success url
	SuccessURL string `json:"success_url,omitempty"`

	// token id
	TokenID string `json:"token_id,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockchainOrderStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentPlatformStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentPlatformType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchasedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.MultipleOf("amount", "body", m.Amount, 0.01); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateBlockchainOrderStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockchainOrderStatus) { // not required
		return nil
	}

	if err := m.BlockchainOrderStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("blockchain_order_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("blockchain_order_status")
		}
		return err
	}

	return nil
}

func (m *Order) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePaymentPlatformStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentPlatformStatus) { // not required
		return nil
	}

	if err := m.PaymentPlatformStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment_platform_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payment_platform_status")
		}
		return err
	}

	return nil
}

func (m *Order) validatePaymentPlatformType(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentPlatformType) { // not required
		return nil
	}

	if err := m.PaymentPlatformType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment_platform_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payment_platform_type")
		}
		return err
	}

	return nil
}

func (m *Order) validatePurchasedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PurchasedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("purchased_at", "body", "date-time", m.PurchasedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order based on the context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockchainOrderStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentPlatformStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentPlatformType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) contextValidateBlockchainOrderStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BlockchainOrderStatus) { // not required
		return nil
	}

	if err := m.BlockchainOrderStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("blockchain_order_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("blockchain_order_status")
		}
		return err
	}

	return nil
}

func (m *Order) contextValidatePaymentPlatformStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentPlatformStatus) { // not required
		return nil
	}

	if err := m.PaymentPlatformStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment_platform_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payment_platform_status")
		}
		return err
	}

	return nil
}

func (m *Order) contextValidatePaymentPlatformType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentPlatformType) { // not required
		return nil
	}

	if err := m.PaymentPlatformType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment_platform_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payment_platform_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

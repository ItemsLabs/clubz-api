// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelGameStatus model game status
//
// swagger:model model.GameStatus
type ModelGameStatus string

func NewModelGameStatus(value ModelGameStatus) *ModelGameStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelGameStatus.
func (m ModelGameStatus) Pointer() *ModelGameStatus {
	return &m
}

const (

	// ModelGameStatusW captures enum value "w"
	ModelGameStatusW ModelGameStatus = "w"

	// ModelGameStatusG captures enum value "g"
	ModelGameStatusG ModelGameStatus = "g"

	// ModelGameStatusF captures enum value "f"
	ModelGameStatusF ModelGameStatus = "f"
)

// for schema
var modelGameStatusEnum []interface{}

func init() {
	var res []ModelGameStatus
	if err := json.Unmarshal([]byte(`["w","g","f"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelGameStatusEnum = append(modelGameStatusEnum, v)
	}
}

func (m ModelGameStatus) validateModelGameStatusEnum(path, location string, value ModelGameStatus) error {
	if err := validate.EnumCase(path, location, value, modelGameStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model game status
func (m ModelGameStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelGameStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model game status based on context it is used
func (m ModelGameStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

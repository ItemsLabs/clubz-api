// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/itemslabs/clubz-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CurrentUser current user
//
// swagger:model CurrentUser
type CurrentUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url"`

	// avg points
	AvgPoints *int64 `json:"avg_points"`

	// avg rank
	AvgRank *int64 `json:"avg_rank"`

	// avg rank percent
	AvgRankPercent *int64 `json:"avg_rank_percent"`

	// balance
	Balance *types.FloatWithZero `json:"balance,omitempty"`

	// banned
	Banned bool `json:"banned"`

	// email
	Email string `json:"email"`

	// follower count
	FollowerCount int64 `json:"follower_count"`

	// following count
	FollowingCount int64 `json:"following_count"`

	// games played
	GamesPlayed int64 `json:"games_played"`

	// id
	ID string `json:"id"`

	// influencer
	Influencer bool `json:"influencer"`

	// moderator
	Moderator bool `json:"moderator"`

	// name
	Name string `json:"name"`

	// paypal email
	PaypalEmail string `json:"paypal_email"`

	// powerup boosts
	PowerupBoosts int64 `json:"powerup_boosts"`

	// premium
	Premium bool `json:"premium"`

	// ref code
	RefCode string `json:"ref_code"`

	// ref code used
	RefCodeUsed bool `json:"ref_code_used"`

	// subscription tier
	SubscriptionTier SubscriptionTier `json:"subscription_tier,omitempty"`

	// verified
	Verified bool `json:"verified"`
}

// Validate validates this current user
func (m *CurrentUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentUser) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUser) validateSubscriptionTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	if err := m.SubscriptionTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subscription_tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("subscription_tier")
		}
		return err
	}

	return nil
}

// ContextValidate validate this current user based on the context it is used
func (m *CurrentUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptionTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentUser) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {

		if swag.IsZero(m.Balance) { // not required
			return nil
		}

		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUser) contextValidateSubscriptionTier(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	if err := m.SubscriptionTier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subscription_tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("subscription_tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrentUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentUser) UnmarshalBinary(b []byte) error {
	var res CurrentUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

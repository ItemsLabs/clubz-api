// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostPurchaseRequest post purchase request
//
// swagger:model PostPurchaseRequest
type PostPurchaseRequest struct {

	// amount
	// Multiple Of: 0.01
	Amount float64 `json:"amount,omitempty"`

	// cancel url
	CancelURL string `json:"cancel_url,omitempty"`

	// item id
	ItemID string `json:"item_id,omitempty"`

	// payment method
	PaymentMethod PaymentType `json:"payment_method,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`

	// success url
	SuccessURL string `json:"success_url,omitempty"`
}

// Validate validates this post purchase request
func (m *PostPurchaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostPurchaseRequest) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.MultipleOf("amount", "body", m.Amount, 0.01); err != nil {
		return err
	}

	return nil
}

func (m *PostPurchaseRequest) validatePaymentMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	if err := m.PaymentMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment_method")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payment_method")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post purchase request based on the context it is used
func (m *PostPurchaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaymentMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostPurchaseRequest) contextValidatePaymentMethod(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	if err := m.PaymentMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment_method")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payment_method")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostPurchaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostPurchaseRequest) UnmarshalBinary(b []byte) error {
	var res PostPurchaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

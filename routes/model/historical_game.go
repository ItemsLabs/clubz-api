// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/gameon-app-inc/laliga-matchfantasy-api/types"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoricalGame historical game
//
// swagger:model HistoricalGame
type HistoricalGame struct {

	// away score
	AwayScore int64 `json:"away_score"`

	// away team
	AwayTeam string `json:"away_team"`

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date"`

	// home score
	HomeScore int64 `json:"home_score"`

	// home team
	HomeTeam string `json:"home_team"`

	// match id
	MatchID string `json:"match_id"`

	// match name
	MatchName string `json:"match_name"`

	// num
	Num int64 `json:"num"`

	// player count
	PlayerCount int64 `json:"player_count"`

	// players
	Players []*HistoricalGamePlayer `json:"players"`

	// points
	Points *types.FloatWithZero `json:"points,omitempty"`

	// prize
	Prize *types.FloatWithZero `json:"prize,omitempty"`

	// rank
	Rank int64 `json:"rank"`
}

// Validate validates this historical game
func (m *HistoricalGame) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoricalGame) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HistoricalGame) validatePlayers(formats strfmt.Registry) error {
	if swag.IsZero(m.Players) { // not required
		return nil
	}

	for i := 0; i < len(m.Players); i++ {
		if swag.IsZero(m.Players[i]) { // not required
			continue
		}

		if m.Players[i] != nil {
			if err := m.Players[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("players" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("players" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoricalGame) validatePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Points) { // not required
		return nil
	}

	if m.Points != nil {
		if err := m.Points.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("points")
			}
			return err
		}
	}

	return nil
}

func (m *HistoricalGame) validatePrize(formats strfmt.Registry) error {
	if swag.IsZero(m.Prize) { // not required
		return nil
	}

	if m.Prize != nil {
		if err := m.Prize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this historical game based on the context it is used
func (m *HistoricalGame) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoricalGame) contextValidatePlayers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Players); i++ {

		if m.Players[i] != nil {

			if swag.IsZero(m.Players[i]) { // not required
				return nil
			}

			if err := m.Players[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("players" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("players" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoricalGame) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if m.Points != nil {

		if swag.IsZero(m.Points) { // not required
			return nil
		}

		if err := m.Points.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("points")
			}
			return err
		}
	}

	return nil
}

func (m *HistoricalGame) contextValidatePrize(ctx context.Context, formats strfmt.Registry) error {

	if m.Prize != nil {

		if swag.IsZero(m.Prize) { // not required
			return nil
		}

		if err := m.Prize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoricalGame) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoricalGame) UnmarshalBinary(b []byte) error {
	var res HistoricalGame
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

import (
	"context"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenCardPack represents an open card pack
//
// swagger:model OpenCardPack
// Updated OpenCardPack model
type OpenCardPack struct {
	ID          string  `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description,omitempty"`
	Price       float64 `json:"price"`
	IconURL     *string `json:"icon_url,omitempty"`
	Rarity      string  `json:"rarity,omitempty"` // Add a new field 'Rarity'
	Type        string  `json:"type,omitempty"`   // Add a new field 'Type'
	// Add more fields as needed
}

// Validate validates the OpenCardPack
func (m *OpenCardPack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrice(); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenCardPack) validatePrice() error {
	if swag.IsZero(m.Price) {
		return errors.New(500, "price is required")
	}
	return nil
}

// ContextValidate validates the OpenCardPack based on the context it is used
func (m *OpenCardPack) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrice(ctx); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenCardPack) contextValidatePrice(ctx context.Context) error {
	if swag.IsZero(m.Price) {
		return errors.New(500, "price is required")
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelLeaderboardEntry model leaderboard entry
//
// swagger:model model.LeaderboardEntry
type ModelLeaderboardEntry struct {

	// position
	Position int64 `json:"position,omitempty"`

	// premium
	Premium bool `json:"premium,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// subscription tier
	SubscriptionTier struct {
		ModelSubscriptionTier
	} `json:"subscription_tier,omitempty"`

	// user avatar url
	UserAvatarURL string `json:"user_avatar_url,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`

	// user name
	UserName string `json:"user_name,omitempty"`
}

// Validate validates this model leaderboard entry
func (m *ModelLeaderboardEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscriptionTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelLeaderboardEntry) validateSubscriptionTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this model leaderboard entry based on the context it is used
func (m *ModelLeaderboardEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubscriptionTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelLeaderboardEntry) contextValidateSubscriptionTier(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelLeaderboardEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelLeaderboardEntry) UnmarshalBinary(b []byte) error {
	var res ModelLeaderboardEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

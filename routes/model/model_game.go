// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelGame model game
//
// swagger:model model.Game
type ModelGame struct {

	// allowed actions
	AllowedActions struct {
		ModelGameAllowedActions
	} `json:"allowed_actions,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// match id
	MatchID string `json:"match_id,omitempty"`

	// picks
	Picks []*ModelGamePick `json:"picks"`

	// powerups
	Powerups []*ModelGamePowerUp `json:"powerups"`

	// premium
	Premium bool `json:"premium,omitempty"`

	// rewards
	Rewards []*ModelMatchReward `json:"rewards"`

	// status
	Status struct {
		ModelGameStatus
	} `json:"status,omitempty"`

	// subscription tier
	SubscriptionTier struct {
		ModelSubscriptionTier
	} `json:"subscription_tier,omitempty"`

	// swaps
	Swaps []*ModelPlayerSwap `json:"swaps"`

	// user id
	UserID string `json:"user_id,omitempty"`

	// version of game
	Version int64 `json:"version,omitempty"`
}

// Validate validates this model game
func (m *ModelGame) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePicks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwaps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelGame) validateAllowedActions(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedActions) { // not required
		return nil
	}

	return nil
}

func (m *ModelGame) validatePicks(formats strfmt.Registry) error {
	if swag.IsZero(m.Picks) { // not required
		return nil
	}

	for i := 0; i < len(m.Picks); i++ {
		if swag.IsZero(m.Picks[i]) { // not required
			continue
		}

		if m.Picks[i] != nil {
			if err := m.Picks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("picks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("picks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelGame) validatePowerups(formats strfmt.Registry) error {
	if swag.IsZero(m.Powerups) { // not required
		return nil
	}

	for i := 0; i < len(m.Powerups); i++ {
		if swag.IsZero(m.Powerups[i]) { // not required
			continue
		}

		if m.Powerups[i] != nil {
			if err := m.Powerups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("powerups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("powerups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelGame) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelGame) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

func (m *ModelGame) validateSubscriptionTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionTier) { // not required
		return nil
	}

	return nil
}

func (m *ModelGame) validateSwaps(formats strfmt.Registry) error {
	if swag.IsZero(m.Swaps) { // not required
		return nil
	}

	for i := 0; i < len(m.Swaps); i++ {
		if swag.IsZero(m.Swaps[i]) { // not required
			continue
		}

		if m.Swaps[i] != nil {
			if err := m.Swaps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("swaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("swaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this model game based on the context it is used
func (m *ModelGame) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowedActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePicks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptionTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelGame) contextValidateAllowedActions(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelGame) contextValidatePicks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Picks); i++ {

		if m.Picks[i] != nil {

			if swag.IsZero(m.Picks[i]) { // not required
				return nil
			}

			if err := m.Picks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("picks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("picks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelGame) contextValidatePowerups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Powerups); i++ {

		if m.Powerups[i] != nil {

			if swag.IsZero(m.Powerups[i]) { // not required
				return nil
			}

			if err := m.Powerups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("powerups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("powerups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelGame) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rewards); i++ {

		if m.Rewards[i] != nil {

			if swag.IsZero(m.Rewards[i]) { // not required
				return nil
			}

			if err := m.Rewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelGame) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelGame) contextValidateSubscriptionTier(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelGame) contextValidateSwaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Swaps); i++ {

		if m.Swaps[i] != nil {

			if swag.IsZero(m.Swaps[i]) { // not required
				return nil
			}

			if err := m.Swaps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("swaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("swaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelGame) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelGame) UnmarshalBinary(b []byte) error {
	var res ModelGame
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

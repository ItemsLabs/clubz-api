// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGameJoinRequest new game join request
//
// swagger:model NewGameJoinRequest
type NewGameJoinRequest struct {

	// match id
	// Required: true
	MatchID *string `json:"match_id"`

	// picks
	// Required: true
	Picks []*NewGameJoinRequestPicksItems0 `json:"picks"`
}

// Validate validates this new game join request
func (m *NewGameJoinRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePicks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewGameJoinRequest) validateMatchID(formats strfmt.Registry) error {

	if err := validate.Required("match_id", "body", m.MatchID); err != nil {
		return err
	}

	return nil
}

func (m *NewGameJoinRequest) validatePicks(formats strfmt.Registry) error {

	if err := validate.Required("picks", "body", m.Picks); err != nil {
		return err
	}

	for i := 0; i < len(m.Picks); i++ {
		if swag.IsZero(m.Picks[i]) { // not required
			continue
		}

		if m.Picks[i] != nil {
			if err := m.Picks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("picks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("picks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this new game join request based on the context it is used
func (m *NewGameJoinRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePicks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewGameJoinRequest) contextValidatePicks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Picks); i++ {

		if m.Picks[i] != nil {

			if swag.IsZero(m.Picks[i]) { // not required
				return nil
			}

			if err := m.Picks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("picks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("picks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewGameJoinRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewGameJoinRequest) UnmarshalBinary(b []byte) error {
	var res NewGameJoinRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewGameJoinRequestPicksItems0 new game join request picks items0
//
// swagger:model NewGameJoinRequestPicksItems0
type NewGameJoinRequestPicksItems0 struct {

	// nft
	// Required: true
	Nft *string `json:"nft"`

	// pick
	// Required: true
	Pick *string `json:"pick"`
}

// Validate validates this new game join request picks items0
func (m *NewGameJoinRequestPicksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePick(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewGameJoinRequestPicksItems0) validateNft(formats strfmt.Registry) error {

	if err := validate.Required("nft", "body", m.Nft); err != nil {
		return err
	}

	return nil
}

func (m *NewGameJoinRequestPicksItems0) validatePick(formats strfmt.Registry) error {

	if err := validate.Required("pick", "body", m.Pick); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new game join request picks items0 based on context it is used
func (m *NewGameJoinRequestPicksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewGameJoinRequestPicksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewGameJoinRequestPicksItems0) UnmarshalBinary(b []byte) error {
	var res NewGameJoinRequestPicksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

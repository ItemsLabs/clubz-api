// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PregamePlayerStat pregame player stat
//
// swagger:model PregamePlayerStat
type PregamePlayerStat struct {

	// latest matches
	LatestMatches []*LatestMatchStat `json:"latest_matches"`

	// point distribution
	PointDistribution []*PointBucket `json:"point_distribution"`

	// selected percent
	SelectedPercent float64 `json:"selected_percent,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this pregame player stat
func (m *PregamePlayerStat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestMatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointDistribution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PregamePlayerStat) validateLatestMatches(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestMatches) { // not required
		return nil
	}

	for i := 0; i < len(m.LatestMatches); i++ {
		if swag.IsZero(m.LatestMatches[i]) { // not required
			continue
		}

		if m.LatestMatches[i] != nil {
			if err := m.LatestMatches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latest_matches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("latest_matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PregamePlayerStat) validatePointDistribution(formats strfmt.Registry) error {
	if swag.IsZero(m.PointDistribution) { // not required
		return nil
	}

	for i := 0; i < len(m.PointDistribution); i++ {
		if swag.IsZero(m.PointDistribution[i]) { // not required
			continue
		}

		if m.PointDistribution[i] != nil {
			if err := m.PointDistribution[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("point_distribution" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("point_distribution" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pregame player stat based on the context it is used
func (m *PregamePlayerStat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLatestMatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePointDistribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PregamePlayerStat) contextValidateLatestMatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LatestMatches); i++ {

		if m.LatestMatches[i] != nil {

			if swag.IsZero(m.LatestMatches[i]) { // not required
				return nil
			}

			if err := m.LatestMatches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latest_matches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("latest_matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PregamePlayerStat) contextValidatePointDistribution(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PointDistribution); i++ {

		if m.PointDistribution[i] != nil {

			if swag.IsZero(m.PointDistribution[i]) { // not required
				return nil
			}

			if err := m.PointDistribution[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("point_distribution" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("point_distribution" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PregamePlayerStat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PregamePlayerStat) UnmarshalBinary(b []byte) error {
	var res PregamePlayerStat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

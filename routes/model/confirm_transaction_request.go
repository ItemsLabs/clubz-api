// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfirmTransactionRequest confirm transaction request
//
// swagger:model ConfirmTransactionRequest
type ConfirmTransactionRequest struct {

	// product Id
	ProductID string `json:"productId,omitempty"`

	// purchase date
	// Format: date-time
	PurchaseDate strfmt.DateTime `json:"purchaseDate,omitempty"`

	// store
	// Enum: [apple google]
	Store string `json:"store,omitempty"`
}

// Validate validates this confirm transaction request
func (m *ConfirmTransactionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePurchaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfirmTransactionRequest) validatePurchaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PurchaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("purchaseDate", "body", "date-time", m.PurchaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var confirmTransactionRequestTypeStorePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["apple","google"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		confirmTransactionRequestTypeStorePropEnum = append(confirmTransactionRequestTypeStorePropEnum, v)
	}
}

const (

	// ConfirmTransactionRequestStoreApple captures enum value "apple"
	ConfirmTransactionRequestStoreApple string = "apple"

	// ConfirmTransactionRequestStoreGoogle captures enum value "google"
	ConfirmTransactionRequestStoreGoogle string = "google"
)

// prop value enum
func (m *ConfirmTransactionRequest) validateStoreEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, confirmTransactionRequestTypeStorePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConfirmTransactionRequest) validateStore(formats strfmt.Registry) error {
	if swag.IsZero(m.Store) { // not required
		return nil
	}

	// value enum
	if err := m.validateStoreEnum("store", "body", m.Store); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this confirm transaction request based on context it is used
func (m *ConfirmTransactionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfirmTransactionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfirmTransactionRequest) UnmarshalBinary(b []byte) error {
	var res ConfirmTransactionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
